HelloClient와 HelloServer의 동작 순서는 각 java파일에 주석을 다는 방식으로 정리했습니다.
HelloApp 디렉토리에 생성된 객체들의 역할은 아래와 같습니다.

Hello 인터페이스는 sayHello와 shutdown 메서드를 선언해놓은 HelloOperations 인터페이스를 상속받고 있고,
_HelloStub은 Hello 인터페이스를 implements하고 있는 객체입니다.
따라서 _HellStub 클래스에 실제 sayHello와 shutdown 메서드가 구현되어 있습니다.
서버와 클라이언트 모두 Hello World를 출력하는 결과를 위한 중간 과정들을 _HelloStub의 인스턴스에게 위임합니다.

_HelloStub의 인스턴스에게 작업을 위임하는 과정에서 사용되는 것이 HelloHelper와 HelloPOATie입니다.
HelloPOATie는 ORB와 POA를 가지고 있으면서, HelloHelper의 narrow 메서드를 호출할 수 있는 HelloPOA의 상속을 받고 있습니다.
HelloHelper의 narrow 메서드는 _HelloStub의 인스턴스를 생성해 반환하는 역할을 합니다.

(오라클 홈페이지의 설명에 의하면 HelloHolder는 HelloHelper에게 read, write 메서드를 위임해주는 클래스라고 되어있는데
HelloServer나 HelloClient의 소스코드를 봐서는 HelloHolder가 언제, 어떻게 생성되어 쓰이는 지 알 수 없었습니다.)

ORB와 POA의 내부를 알 수 없어 정확하게 파악하지는 못했지만 제가 생각한 흐름을 간단하게 정리해보면
Hello.java와 HelloOperations.java에서는 이 애플리케이션에서 제공할 기능을 정의해두고
ORB, POA -> Holder, Helper -> Stub 순서로 명령이 전달되어 최종 실행이 이루어지는 것 같습니다.